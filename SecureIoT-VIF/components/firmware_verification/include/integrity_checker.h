/**
 * @file integrity_checker.h
 * @brief Header pour le v√©rificateur d'int√©grit√© Community Edition
 * 
 * D√©finit l'interface simplifi√©e pour la v√©rification d'int√©grit√© de base.
 * Version √©ducative sans fonctionnalit√©s temps r√©el.
 * 
 * @author Framework SecureIoT-VIF Community
 * @version 1.0.0 - Community Edition
 * @date 2025
 */

#ifndef INTEGRITY_CHECKER_H
#define INTEGRITY_CHECKER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>
#include "esp_err.h"

// ================================
// Types et √©num√©rations Community
// ================================

/**
 * @brief √âtats de v√©rification d'int√©grit√© Community
 */
typedef enum {
    INTEGRITY_OK = 0,                   // Int√©grit√© v√©rifi√©e
    INTEGRITY_CORRUPTED,                // Corruption d√©tect√©e
    INTEGRITY_ERROR,                    // Erreur syst√®me
    INTEGRITY_INVALID_CHUNK,            // Chunk invalide
    INTEGRITY_NOT_INITIALIZED,          // Non initialis√©
    INTEGRITY_MAX
} integrity_status_t;

/**
 * @brief Statistiques d'int√©grit√© Community
 */
typedef struct {
    uint32_t total_checks;              // Nombre total de v√©rifications
    uint32_t successful_checks;         // V√©rifications r√©ussies
    uint32_t failed_checks;             // V√©rifications √©chou√©es
    uint64_t last_check_time;           // Derni√®re v√©rification (ms)
    uint32_t last_check_duration_ms;    // Dur√©e derni√®re v√©rification
    uint32_t chunks_verified;           // Chunks v√©rifi√©s au total
    uint32_t chunks_corrupted;          // Chunks corrompus d√©tect√©s
} integrity_stats_community_t;

// ================================
// Constantes Community
// ================================

#define INTEGRITY_CHUNK_SIZE_COMMUNITY      (8192)      // Plus gros qu'Enterprise
#define INTEGRITY_SAMPLE_RATIO_COMMUNITY    (0.1f)      // 10% des chunks seulement
#define INTEGRITY_MAX_CHUNKS_COMMUNITY      (256)       // Limite √©ducative

// ================================
// Fonctions d'initialisation
// ================================

/**
 * @brief Initialise le v√©rificateur d'int√©grit√© Community
 * 
 * Version simplifi√©e pour usage √©ducatif et de recherche.
 * 
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t integrity_checker_init(void);

/**
 * @brief Deinitialise le v√©rificateur d'int√©grit√©
 * 
 * @return ESP_OK si succ√®s
 */
esp_err_t integrity_checker_deinit(void);

// ================================
// Fonctions de v√©rification Community
// ================================

/**
 * @brief V√©rification d'int√©grit√© basique au d√©marrage
 * 
 * Effectue une v√©rification simplifi√©e du firmware au boot.
 * Utilise un √©chantillonnage de chunks pour l'√©ducation.
 * 
 * @return integrity_status_t Status de la v√©rification
 */
integrity_status_t integrity_check_firmware_basic(void);

/**
 * @brief V√©rification rapide d'un chunk sp√©cifique
 * 
 * Version √©ducative pour comprendre le principe des chunks.
 * 
 * @param chunk_id ID du chunk √† v√©rifier
 * @return integrity_status_t Status de la v√©rification
 */
integrity_status_t integrity_check_chunk_basic(size_t chunk_id);

// ================================
// Fonctions de statistiques Community
// ================================

/**
 * @brief Obtient les statistiques d'int√©grit√© Community
 * 
 * @param stats Pointeur vers la structure de statistiques
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_ARG sinon
 */
esp_err_t integrity_get_stats_community(integrity_stats_community_t *stats);

/**
 * @brief Affiche les statistiques d'int√©grit√© Community
 */
void integrity_print_stats_community(void);

/**
 * @brief R√©initialise les statistiques d'int√©grit√©
 * 
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t integrity_reset_stats_community(void);

// ================================
// Fonctions utilitaires Community
// ================================

/**
 * @brief Test de fonctionnement du v√©rificateur Community
 * 
 * Auto-test pour v√©rifier que toutes les fonctions de base marchent.
 * 
 * @return ESP_OK si tous les tests passent, ESP_FAIL sinon
 */
esp_err_t integrity_checker_self_test(void);

/**
 * @brief Affiche les informations du v√©rificateur Community
 */
void integrity_checker_print_info(void);

/**
 * @brief Convertit un status d'int√©grit√© en cha√Æne
 * 
 * @param status Status √† convertir
 * @return Cha√Æne d√©crivant le status
 */
const char* integrity_status_to_string(integrity_status_t status);

// ================================
// Macros utilitaires Community
// ================================

/**
 * @brief Calcule le nombre de chunks pour une taille donn√©e
 */
#define INTEGRITY_CALC_CHUNKS_COMMUNITY(size) \
    (((size) + INTEGRITY_CHUNK_SIZE_COMMUNITY - 1) / INTEGRITY_CHUNK_SIZE_COMMUNITY)

/**
 * @brief Calcule l'offset d'un chunk
 */
#define INTEGRITY_CHUNK_OFFSET_COMMUNITY(chunk_id) \
    ((chunk_id) * INTEGRITY_CHUNK_SIZE_COMMUNITY)

/**
 * @brief V√©rifie si un chunk ID est valide
 */
#define INTEGRITY_IS_VALID_CHUNK_COMMUNITY(chunk_id, max_chunks) \
    ((chunk_id) < (max_chunks))

// ================================
// Messages informatifs Community
// ================================

#define INTEGRITY_COMMUNITY_FEATURES \
    "üéì Fonctionnalit√©s Community:\n" \
    "‚Ä¢ V√©rification au d√©marrage seulement\n" \
    "‚Ä¢ √âchantillonnage de chunks (√©ducatif)\n" \
    "‚Ä¢ Hash SHA-256 software\n" \
    "‚Ä¢ Statistiques basiques\n" \
    "‚Ä¢ Id√©al pour apprentissage\n"

#define INTEGRITY_COMMUNITY_LIMITATIONS \
    "‚ö†Ô∏è  Limitations Community:\n" \
    "‚Ä¢ Pas de v√©rification temps r√©el\n" \
    "‚Ä¢ Pas de v√©rification de signature\n" \
    "‚Ä¢ √âchantillonnage partiel seulement\n" \
    "‚Ä¢ Performance r√©duite\n" \
    "‚Ä¢ Usage √©ducatif uniquement\n"

#define INTEGRITY_UPGRADE_TO_ENTERPRISE \
    "üöÄ Upgrade vers Enterprise pour:\n" \
    "‚Ä¢ V√©rification temps r√©el continue\n" \
    "‚Ä¢ V√©rification compl√®te (tous chunks)\n" \
    "‚Ä¢ Validation signatures cryptographiques\n" \
    "‚Ä¢ Performance optimis√©e hardware\n" \
    "‚Ä¢ Support production industrielle\n"

#ifdef __cplusplus
}
#endif

#endif /* INTEGRITY_CHECKER_H */