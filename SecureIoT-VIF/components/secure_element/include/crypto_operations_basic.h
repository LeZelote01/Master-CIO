/**
 * @file crypto_operations_basic.h
 * @brief Header pour les op√©rations cryptographiques de base - Community Edition
 * 
 * D√©finit l'interface crypto simplifi√©e pour la version Community de SecureIoT-VIF.
 * Utilise uniquement le crypto software via mbedTLS.
 * 
 * @author Framework SecureIoT-VIF Community
 * @version 1.0.0 - Community Edition
 * @date 2025
 */

#ifndef CRYPTO_OPERATIONS_BASIC_H
#define CRYPTO_OPERATIONS_BASIC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>
#include "esp_err.h"

// ================================
// Constantes crypto Community
// ================================

#define CRYPTO_BASIC_AES_KEY_SIZE           (16)    // AES-128
#define CRYPTO_BASIC_AES_IV_SIZE            (12)    // GCM IV
#define CRYPTO_BASIC_AES_TAG_SIZE           (16)    // GCM Tag
#define CRYPTO_BASIC_SHA256_SIZE            (32)    // SHA-256 hash
#define CRYPTO_BASIC_ECDSA_PUBLIC_KEY_SIZE  (65)    // P-256 uncompressed
#define CRYPTO_BASIC_ECDSA_PRIVATE_KEY_SIZE (32)    // P-256 private key
#define CRYPTO_BASIC_ECDSA_SIGNATURE_MAX    (72)    // DER encoded max

// ================================
// Types et structures Community
// ================================

/**
 * @brief Structure pour une paire de cl√©s ECDSA basique
 */
typedef struct {
    uint8_t public_key[CRYPTO_BASIC_ECDSA_PUBLIC_KEY_SIZE];
    size_t public_key_len;
    uint8_t private_key[CRYPTO_BASIC_ECDSA_PRIVATE_KEY_SIZE];
    size_t private_key_len;
} crypto_basic_keypair_t;

/**
 * @brief R√©sultats des op√©rations crypto basiques
 */
typedef enum {
    CRYPTO_BASIC_SUCCESS = 0,
    CRYPTO_BASIC_ERROR_INVALID_PARAM,
    CRYPTO_BASIC_ERROR_NOT_INITIALIZED,
    CRYPTO_BASIC_ERROR_MEMORY,
    CRYPTO_BASIC_ERROR_CRYPTO_FAILURE,
    CRYPTO_BASIC_MAX
} crypto_basic_result_t;

// ================================
// Fonctions d'initialisation
// ================================

/**
 * @brief Initialise le syst√®me cryptographique de base
 * 
 * Configure mbedTLS pour les op√©rations crypto software.
 * Version simplifi√©e pour Community Edition.
 * 
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_operations_basic_init(void);

/**
 * @brief Deinitialise le syst√®me cryptographique
 * 
 * @return ESP_OK si succ√®s
 */
esp_err_t crypto_operations_basic_deinit(void);

// ================================
// Fonctions de g√©n√©ration al√©atoire
// ================================

/**
 * @brief G√©n√®re des donn√©es al√©atoires (software uniquement)
 * 
 * Utilise le g√©n√©rateur software mbedTLS (moins s√©curis√© que TRNG hardware).
 * 
 * @param buffer Buffer de sortie
 * @param length Nombre de bytes √† g√©n√©rer
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_generate_random(uint8_t *buffer, size_t length);

// ================================
// Fonctions de hash
// ================================

/**
 * @brief Calcule un hash SHA-256 (software)
 * 
 * Version software plus lente que l'acc√©l√©ration hardware ESP32.
 * 
 * @param input Donn√©es √† hasher
 * @param input_len Taille des donn√©es
 * @param output Buffer de sortie (32 bytes)
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_sha256(const uint8_t *input, size_t input_len, uint8_t *output);

// ================================
// Fonctions de chiffrement sym√©trique
// ================================

/**
 * @brief Chiffre des donn√©es avec AES-128-GCM
 * 
 * Version simplifi√©e AES-128 (vs AES-256 Enterprise).
 * 
 * @param key Cl√© AES-128 (16 bytes)
 * @param iv Vecteur d'initialisation (12 bytes)
 * @param input Donn√©es √† chiffrer
 * @param input_len Taille des donn√©es
 * @param output Buffer de sortie
 * @param tag Tag d'authentification (16 bytes)
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_aes_encrypt(const uint8_t *key, const uint8_t *iv,
                                  const uint8_t *input, size_t input_len,
                                  uint8_t *output, uint8_t *tag);

/**
 * @brief D√©chiffre des donn√©es avec AES-128-GCM
 * 
 * @param key Cl√© AES-128 (16 bytes)
 * @param iv Vecteur d'initialisation (12 bytes)
 * @param input Donn√©es chiffr√©es
 * @param input_len Taille des donn√©es
 * @param tag Tag d'authentification (16 bytes)
 * @param output Buffer de sortie
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_aes_decrypt(const uint8_t *key, const uint8_t *iv,
                                  const uint8_t *input, size_t input_len,
                                  const uint8_t *tag, uint8_t *output);

// ================================
// Fonctions de signature num√©rique
// ================================

/**
 * @brief G√©n√®re une paire de cl√©s ECDSA P-256 (software)
 * 
 * ATTENTION: Les cl√©s sont stock√©es en RAM (non s√©curis√©).
 * En Enterprise, les cl√©s sont prot√©g√©es par eFuse.
 * 
 * @param keypair Structure pour stocker la paire de cl√©s
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_generate_ecdsa_keypair(crypto_basic_keypair_t *keypair);

/**
 * @brief Signe un hash avec ECDSA (software)
 * 
 * @param keypair Paire de cl√©s contenant la cl√© priv√©e
 * @param hash Hash √† signer (32 bytes SHA-256)
 * @param hash_len Taille du hash
 * @param signature Buffer pour la signature
 * @param signature_len Pointeur vers la taille de la signature
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t crypto_basic_ecdsa_sign(const crypto_basic_keypair_t *keypair,
                                 const uint8_t *hash, size_t hash_len,
                                 uint8_t *signature, size_t *signature_len);

/**
 * @brief V√©rifie une signature ECDSA (software)
 * 
 * @param keypair Paire de cl√©s contenant la cl√© publique
 * @param hash Hash original
 * @param hash_len Taille du hash
 * @param signature Signature √† v√©rifier
 * @param signature_len Taille de la signature
 * @return ESP_OK si signature valide, ESP_FAIL sinon
 */
esp_err_t crypto_basic_ecdsa_verify(const crypto_basic_keypair_t *keypair,
                                   const uint8_t *hash, size_t hash_len,
                                   const uint8_t *signature, size_t signature_len);

// ================================
// Fonctions utilitaires
// ================================

/**
 * @brief Auto-test du syst√®me cryptographique de base
 * 
 * Teste toutes les fonctions crypto disponibles en Community Edition.
 * 
 * @return ESP_OK si tous les tests passent, ESP_FAIL sinon
 */
esp_err_t crypto_basic_self_test(void);

/**
 * @brief Affiche les informations du syst√®me crypto Community
 */
void crypto_basic_print_info(void);

/**
 * @brief Convertit un code d'erreur crypto en cha√Æne
 * 
 * @param error Code d'erreur crypto_basic_result_t
 * @return Cha√Æne d√©crivant l'erreur
 */
const char* crypto_basic_error_to_string(crypto_basic_result_t error);

// ================================
// Macros utilitaires Community
// ================================

/**
 * @brief Efface de mani√®re s√©curis√©e un buffer (Community)
 */
#define CRYPTO_BASIC_SECURE_ZERO(ptr, len) do { \
    volatile uint8_t *p = (volatile uint8_t *)(ptr); \
    size_t i; \
    for (i = 0; i < (len); i++) { \
        p[i] = 0; \
    } \
} while(0)

/**
 * @brief V√©rifie si le crypto est initialis√©
 */
#define CRYPTO_BASIC_CHECK_INIT() do { \
    if (!crypto_initialized) { \
        ESP_LOGE(TAG, "Crypto de base non initialis√©"); \
        return ESP_ERR_INVALID_STATE; \
    } \
} while(0)

// ================================
// Messages informatifs Community
// ================================

#define CRYPTO_BASIC_SECURITY_WARNING \
    "‚ö†Ô∏è  ATTENTION Community Edition ‚ö†Ô∏è\n" \
    "‚Ä¢ Crypto SOFTWARE uniquement (plus lent)\n" \
    "‚Ä¢ Cl√©s stock√©es en RAM (non s√©curis√©)\n" \
    "‚Ä¢ Pas de protection hardware\n" \
    "‚Ä¢ Usage √©ducatif/recherche UNIQUEMENT\n" \
    "‚Ä¢ Pour production: SecureIoT-VIF Enterprise\n"

#define CRYPTO_BASIC_FEATURE_COMPARISON \
    "üÜö Community vs Enterprise:\n" \
    "Community: AES-128, Software, RAM storage\n" \
    "Enterprise: AES-256, Hardware, eFuse storage\n" \
    "Performance: Enterprise 4x plus rapide\n" \
    "S√©curit√©: Enterprise niveau industriel\n"

#ifdef __cplusplus
}
#endif

#endif /* CRYPTO_OPERATIONS_BASIC_H */