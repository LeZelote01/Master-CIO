/**
 * @file anomaly_detector.h
 * @brief Header pour le d√©tecteur d'anomalies Community Edition
 * 
 * Interface simplifi√©e pour la d√©tection d'anomalies par seuils fixes.
 * Version √©ducative sans ML adaptatif.
 * 
 * @author Framework SecureIoT-VIF Community
 * @version 1.0.0 - Community Edition
 * @date 2025
 */

#ifndef ANOMALY_DETECTOR_H
#define ANOMALY_DETECTOR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include "esp_err.h"
#include "sensor_manager.h"

// ================================
// Constantes Community
// ================================

#define ANOMALY_HISTORY_SIZE_COMMUNITY      (30)        // R√©duit vs Enterprise
#define ANOMALY_DETECTION_WINDOW_COMMUNITY  (5)         // R√©duit vs Enterprise
#define ANOMALY_SCORE_THRESHOLD_COMMUNITY   (0.3f)      // Plus tol√©rant

// ================================
// Types et √©num√©rations
// ================================

/**
 * @brief Codes d'erreur du d√©tecteur d'anomalies
 */
typedef enum {
    ANOMALY_SUCCESS = 0,
    ANOMALY_ERROR_NOT_INITIALIZED,
    ANOMALY_ERROR_INVALID_DATA,
    ANOMALY_ERROR_INSUFFICIENT_DATA,
    ANOMALY_ERROR_THRESHOLD_INVALID,
    ANOMALY_MAX
} anomaly_error_t;

/**
 * @brief Structure des seuils de d√©tection Community
 */
typedef struct {
    float temp_min;                 // Temp√©rature minimale acceptable
    float temp_max;                 // Temp√©rature maximale acceptable
    float humidity_min;             // Humidit√© minimale acceptable
    float humidity_max;             // Humidit√© maximale acceptable
    float temp_change_max;          // Changement max temp√©rature entre lectures
    float humidity_change_max;      // Changement max humidit√© entre lectures
} anomaly_thresholds_t;

/**
 * @brief R√©sultat de d√©tection d'anomalie Community
 */
typedef struct {
    bool is_anomaly;                // Anomalie d√©tect√©e ?
    float anomaly_score;            // Score d'anomalie 0.0-1.0
    uint64_t timestamp;             // Timestamp de l'analyse
    float temperature;              // Temp√©rature analys√©e
    float humidity;                 // Humidit√© analys√©e
    anomaly_error_t error_code;     // Code d'erreur
    
    // D√©tails des anomalies (Community)
    bool temp_anomaly;              // Anomalie temp√©rature ?
    bool humidity_anomaly;          // Anomalie humidit√© ?
    bool change_anomaly;            // Changement rapide ?
} anomaly_result_t;

/**
 * @brief Statistiques du d√©tecteur Community
 */
typedef struct {
    uint32_t total_analyses;        // Analyses totales
    uint32_t normal_analyses;       // Analyses normales
    uint32_t anomalies_detected;    // Anomalies d√©tect√©es
    uint64_t last_anomaly_time;     // Derni√®re anomalie (timestamp)
    uint64_t init_time;             // Timestamp d'initialisation
} anomaly_stats_community_t;

// ================================
// Fonctions d'initialisation
// ================================

/**
 * @brief Initialise le d√©tecteur d'anomalies Community
 * 
 * Version simplifi√©e utilisant uniquement des seuils fixes.
 * 
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t anomaly_detector_basic_init(void);

/**
 * @brief Deinitialise le d√©tecteur d'anomalies
 * 
 * @return ESP_OK si succ√®s
 */
esp_err_t anomaly_detector_basic_deinit(void);

// ================================
// Fonctions de d√©tection Community
// ================================

/**
 * @brief D√©tection d'anomalies par seuils fixes (Community)
 * 
 * M√©thode simplifi√©e pour l'apprentissage:
 * - V√©rification contre seuils absolus
 * - D√©tection de changements rapides
 * - Pas d'apprentissage automatique
 * 
 * @param data Donn√©es capteur √† analyser
 * @return anomaly_result_t R√©sultat de l'analyse
 */
anomaly_result_t anomaly_detect_threshold_based(const sensor_data_t *data);

// ================================
// Fonctions de configuration Community
// ================================

/**
 * @brief Configure les seuils de d√©tection Community
 * 
 * Permet de personnaliser les seuils pour l'apprentissage.
 * 
 * @param thresholds Nouveaux seuils √† appliquer
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_ARG si seuils invalides
 */
esp_err_t anomaly_set_thresholds_community(const anomaly_thresholds_t *thresholds);

/**
 * @brief Obtient les seuils actuels
 * 
 * @param thresholds Pointeur vers la structure de seuils
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_ARG sinon
 */
esp_err_t anomaly_get_thresholds_community(anomaly_thresholds_t *thresholds);

// ================================
// Fonctions de statistiques Community
// ================================

/**
 * @brief Obtient les statistiques du d√©tecteur Community
 * 
 * @param stats Pointeur vers la structure de statistiques
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_ARG sinon
 */
esp_err_t anomaly_get_stats_community(anomaly_stats_community_t *stats);

/**
 * @brief Affiche les statistiques du d√©tecteur Community
 */
void anomaly_print_stats_community(void);

/**
 * @brief R√©initialise les statistiques du d√©tecteur
 * 
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t anomaly_reset_stats_community(void);

// ================================
// Fonctions utilitaires Community
// ================================

/**
 * @brief Test de fonctionnement du d√©tecteur Community
 * 
 * @return ESP_OK si tous les tests passent, ESP_FAIL sinon
 */
esp_err_t anomaly_detector_self_test(void);

/**
 * @brief Affiche les informations du d√©tecteur Community
 */
void anomaly_detector_print_info(void);

/**
 * @brief Convertit un code d'erreur en cha√Æne
 * 
 * @param error Code d'erreur anomaly_error_t
 * @return Cha√Æne d√©crivant l'erreur
 */
const char* anomaly_error_to_string(anomaly_error_t error);

// ================================
// Macros utilitaires Community
// ================================

/**
 * @brief V√©rifie si un score d'anomalie d√©passe le seuil
 */
#define ANOMALY_IS_DETECTED_COMMUNITY(score) \
    ((score) >= ANOMALY_SCORE_THRESHOLD_COMMUNITY)

/**
 * @brief Calcule le pourcentage d'anomalies
 */
#define ANOMALY_CALC_RATE_COMMUNITY(detected, total) \
    (((total) > 0) ? ((float)(detected) / (total) * 100.0f) : 0.0f)

// ================================
// Seuils par d√©faut Community
// ================================

#define ANOMALY_DEFAULT_TEMP_MIN_COMMUNITY      (5.0f)      // Plus large qu'Enterprise
#define ANOMALY_DEFAULT_TEMP_MAX_COMMUNITY      (45.0f)     // Plus large qu'Enterprise
#define ANOMALY_DEFAULT_HUMIDITY_MIN_COMMUNITY  (10.0f)     // Plus large qu'Enterprise
#define ANOMALY_DEFAULT_HUMIDITY_MAX_COMMUNITY  (90.0f)     // Plus large qu'Enterprise
#define ANOMALY_DEFAULT_TEMP_CHANGE_COMMUNITY   (10.0f)     // Plus tol√©rant
#define ANOMALY_DEFAULT_HUMIDITY_CHANGE_COMMUNITY (20.0f)   // Plus tol√©rant

// ================================
// Messages informatifs Community
// ================================

#define ANOMALY_COMMUNITY_FEATURES \
    "üéì Fonctionnalit√©s Community:\n" \
    "‚Ä¢ D√©tection par seuils fixes\n" \
    "‚Ä¢ Configuration seuils personnalis√©s\n" \
    "‚Ä¢ D√©tection changements rapides\n" \
    "‚Ä¢ Statistiques d√©taill√©es\n" \
    "‚Ä¢ Historique simple\n"

#define ANOMALY_COMMUNITY_LIMITATIONS \
    "‚ö†Ô∏è  Limitations Community:\n" \
    "‚Ä¢ Pas d'apprentissage automatique\n" \
    "‚Ä¢ Pas d'adaptation comportementale\n" \
    "‚Ä¢ Seuils fixes uniquement\n" \
    "‚Ä¢ Historique limit√© (30 vs 100)\n" \
    "‚Ä¢ Usage √©ducatif uniquement\n"

#define ANOMALY_UPGRADE_TO_ENTERPRISE \
    "üöÄ Upgrade vers Enterprise pour:\n" \
    "‚Ä¢ Machine Learning adaptatif\n" \
    "‚Ä¢ Adaptation comportementale automatique\n" \
    "‚Ä¢ Algorithmes avanc√©s (Z-score, etc.)\n" \
    "‚Ä¢ Historique √©tendu et analyse temporelle\n" \
    "‚Ä¢ Performance optimis√©e pour production\n"

#ifdef __cplusplus
}
#endif

#endif /* ANOMALY_DETECTOR_H */