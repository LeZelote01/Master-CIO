/**
 * @file incident_manager.h
 * @brief Header pour le gestionnaire d'incidents Community Edition
 * 
 * Interface simplifi√©e pour la gestion des incidents de s√©curit√©.
 * Version √©ducative sans actions automatiques critiques.
 * 
 * @author Framework SecureIoT-VIF Community
 * @version 1.0.0 - Community Edition
 * @date 2025
 */

#ifndef INCIDENT_MANAGER_H
#define INCIDENT_MANAGER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>
#include "esp_err.h"

// ================================
// Types et structures Community
// ================================

/**
 * @brief Statistiques des incidents Community
 */
typedef struct {
    uint32_t total_incidents;       // Incidents totaux
    uint32_t integrity_failures;   // √âchecs v√©rification int√©grit√©
    uint32_t anomalies_handled;     // Anomalies g√©r√©es
    uint32_t security_violations;   // Violations de s√©curit√©
    uint32_t other_incidents;       // Autres incidents
    uint64_t last_incident_time;    // Dernier incident (timestamp)
    uint64_t init_time;             // Timestamp d'initialisation
} incident_stats_t;

// ================================
// Fonctions d'initialisation
// ================================

/**
 * @brief Initialise le gestionnaire d'incidents Community
 * 
 * Version simplifi√©e pour l'apprentissage de la gestion d'incidents.
 * 
 * @return ESP_OK si succ√®s, ESP_FAIL sinon
 */
esp_err_t incident_manager_init(void);

/**
 * @brief Deinitialise le gestionnaire d'incidents
 * 
 * @return ESP_OK si succ√®s
 */
esp_err_t incident_manager_deinit(void);

// ================================
// Fonctions de gestion d'incidents Community
// ================================

/**
 * @brief Gestion d'un √©chec de v√©rification d'int√©grit√©
 * 
 * Version Community: logging et statistiques uniquement.
 * 
 * @param event_data Donn√©es de l'√©v√©nement (peut √™tre NULL)
 * @return ESP_OK si trait√©, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t incident_handle_integrity_failure(const void *event_data);

/**
 * @brief Gestion d'une anomalie d√©tect√©e
 * 
 * Version Community: analyse basique et logging.
 * 
 * @param event_data Donn√©es de l'√©v√©nement (peut √™tre NULL)
 * @return ESP_OK si trait√©, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t incident_handle_anomaly(const void *event_data);

/**
 * @brief Gestion d'un √©chec d'attestation
 * 
 * Note: L'attestation n'est pas disponible en Community Edition.
 * 
 * @param event_data Donn√©es de l'√©v√©nement (peut √™tre NULL)
 * @return ESP_OK (information seulement)
 */
esp_err_t incident_handle_attestation_failure(const void *event_data);

/**
 * @brief Gestion d'un acc√®s non autoris√©
 * 
 * Version Community: logging et alerte console.
 * 
 * @param event_data Donn√©es de l'√©v√©nement (peut √™tre NULL)
 * @return ESP_OK si trait√©, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t incident_handle_unauthorized_access(const void *event_data);

// ================================
// Fonctions de statistiques Community
// ================================

/**
 * @brief Obtient les statistiques des incidents
 * 
 * @param stats Pointeur vers la structure de statistiques
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_ARG sinon
 */
esp_err_t incident_get_stats(incident_stats_t *stats);

/**
 * @brief Affiche les statistiques des incidents
 */
void incident_print_stats(void);

/**
 * @brief R√©initialise les statistiques des incidents
 * 
 * @return ESP_OK si succ√®s, ESP_ERR_INVALID_STATE si non initialis√©
 */
esp_err_t incident_reset_stats(void);

// ================================
// Fonctions utilitaires Community
// ================================

/**
 * @brief Test de fonctionnement du gestionnaire Community
 * 
 * @return ESP_OK si tous les tests passent, ESP_FAIL sinon
 */
esp_err_t incident_manager_self_test(void);

/**
 * @brief Affiche les informations du gestionnaire Community
 */
void incident_manager_print_info(void);

// ================================
// Macros utilitaires Community
// ================================

/**
 * @brief Calcule le taux d'incidents par heure
 */
#define INCIDENT_CALC_RATE_PER_HOUR_COMMUNITY(incidents, uptime_ms) \
    (((uptime_ms) > 0) ? ((float)(incidents) * 3600000.0f / (uptime_ms)) : 0.0f)

// ================================
// Messages informatifs Community
// ================================

#define INCIDENT_COMMUNITY_FEATURES \
    "üéì Fonctionnalit√©s Community:\n" \
    "‚Ä¢ Gestion incidents de base\n" \
    "‚Ä¢ Logging d√©taill√©\n" \
    "‚Ä¢ Statistiques compl√®tes\n" \
    "‚Ä¢ Notifications console\n" \
    "‚Ä¢ Id√©al pour apprentissage\n"

#define INCIDENT_COMMUNITY_LIMITATIONS \
    "‚ö†Ô∏è  Limitations Community:\n" \
    "‚Ä¢ Pas d'actions automatiques\n" \
    "‚Ä¢ Pas de red√©marrage auto\n" \
    "‚Ä¢ Pas d'escalade d'incidents\n" \
    "‚Ä¢ Pas de notifications externes\n" \
    "‚Ä¢ Usage √©ducatif uniquement\n"

#define INCIDENT_UPGRADE_TO_ENTERPRISE \
    "üöÄ Upgrade vers Enterprise pour:\n" \
    "‚Ä¢ Actions automatiques de r√©cup√©ration\n" \
    "‚Ä¢ Red√©marrage et isolation automatiques\n" \
    "‚Ä¢ Escalade d'incidents configurable\n" \
    "‚Ä¢ Notifications multiples (email, SMS, etc.)\n" \
    "‚Ä¢ Int√©gration syst√®mes de monitoring\n"

#ifdef __cplusplus
}
#endif

#endif /* INCIDENT_MANAGER_H */