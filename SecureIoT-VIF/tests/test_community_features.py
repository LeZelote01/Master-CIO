#!/usr/bin/env python3
"""
Tests automatis√©s pour SecureIoT-VIF Community Edition
Version simplifi√©e pour les fonctionnalit√©s de base
"""

import unittest
import serial
import time
import re
import json
from pathlib import Path

class SecureIoTVIFCommunityTests(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests Community"""
        cls.serial_port = "/dev/ttyUSB0"  # √Ä adapter selon votre configuration
        cls.baudrate = 115200
        cls.timeout = 30
        
    def setUp(self):
        """Configuration avant chaque test"""
        try:
            self.ser = serial.Serial(self.serial_port, self.baudrate, timeout=self.timeout)
            time.sleep(2)  # Attendre stabilisation
        except serial.SerialException:
            self.skipTest(f"Port s√©rie {self.serial_port} non disponible")
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        if hasattr(self, 'ser'):
            self.ser.close()
    
    def read_serial_until_pattern(self, pattern, timeout=10):
        """Lit le port s√©rie jusqu'√† trouver un pattern"""
        start_time = time.time()
        buffer = ""
        
        while time.time() - start_time < timeout:
            if self.ser.in_waiting:
                data = self.ser.read(self.ser.in_waiting).decode('utf-8', errors='ignore')
                buffer += data
                
                if re.search(pattern, buffer, re.MULTILINE):
                    return buffer
        
        return buffer
    
    def test_community_boot_sequence(self):
        """Test de la s√©quence de d√©marrage Community"""
        print("üß™ Test s√©quence de d√©marrage Community...")
        
        # Red√©marrer l'ESP32
        self.ser.setDTR(False)
        time.sleep(0.1)
        self.ser.setDTR(True)
        
        # Attendre les messages de d√©marrage Community
        boot_log = self.read_serial_until_pattern(r"Community Edition Op√©rationnel", timeout=30)
        
        # V√©rifications Community sp√©cifiques
        self.assertIn("D√©marrage SecureIoT-VIF Community Edition", boot_log)
        self.assertIn("Crypto de base initialis√©", boot_log)
        self.assertIn("V√©rification int√©grit√© initiale r√©ussie", boot_log)
        self.assertIn("Gestionnaire de capteurs Community initialis√©", boot_log)
        self.assertIn("Community Edition Op√©rationnel", boot_log)
        
        print("‚úÖ S√©quence de d√©marrage Community OK")
    
    def test_community_crypto_basic(self):
        """Test du crypto de base Community"""
        print("üß™ Test crypto de base Community...")
        
        boot_log = self.read_serial_until_pattern(r"Crypto de base initialis√©", timeout=20)
        
        # V√©rifications crypto Community
        self.assertIn("Initialisation crypto de base Community", boot_log)
        self.assertIn("Version √©ducative - Crypto software seulement", boot_log)
        self.assertIn("Crypto de base initialis√©", boot_log)
        
        # V√©rifier les mentions Community
        self.assertIn("Community Edition", boot_log)
        self.assertNotIn("Hardware Security Module", boot_log)  # Pas de HSM en Community
        self.assertNotIn("TRNG", boot_log)  # Pas de TRNG hardware en Community
        
        print("‚úÖ Crypto de base Community OK")
    
    def test_community_integrity_basic(self):
        """Test de v√©rification d'int√©grit√© basique Community"""
        print("üß™ Test v√©rification d'int√©grit√© Community...")
        
        # Attendre une v√©rification d'int√©grit√©
        integrity_log = self.read_serial_until_pattern(r"V√©rification d'int√©grit√©", timeout=90)
        
        # V√©rifications Community sp√©cifiques
        self.assertIn("V√©rification d'int√©grit√© basique", integrity_log)
        self.assertNotIn("temps r√©el", integrity_log)  # Pas de temps r√©el en Community
        self.assertNotIn("attestation", integrity_log)  # Pas d'attestation en Community
        
        # Rechercher les logs d'√©chantillonnage Community
        if "√âchantillonnage" in integrity_log:
            self.assertIn("chunks sur", integrity_log)
            print("‚úÖ √âchantillonnage √©ducatif d√©tect√©")
        
        print("‚úÖ V√©rification d'int√©grit√© Community OK")
    
    def test_community_sensor_reading(self):
        """Test de lecture des capteurs Community"""
        print("üß™ Test lecture capteurs Community...")
        
        # Attendre une lecture de capteur
        sensor_log = self.read_serial_until_pattern(r"Donn√©es capteur:", timeout=30)
        
        # V√©rifications
        self.assertIn("Donn√©es capteur:", sensor_log)
        
        # Extraire les valeurs
        reading_match = re.search(r"T=([\d.-]+)¬∞C, H=([\d.-]+)%", sensor_log)
        if reading_match:
            temp, humidity = reading_match.groups()
            temp = float(temp)
            humidity = float(humidity)
            
            # V√©rifier les plages valides
            self.assertGreaterEqual(temp, -40.0, "Temp√©rature dans la plage DHT22")
            self.assertLessEqual(temp, 80.0, "Temp√©rature dans la plage DHT22")
            self.assertGreaterEqual(humidity, 0.0, "Humidit√© dans la plage DHT22")
            self.assertLessEqual(humidity, 100.0, "Humidit√© dans la plage DHT22")
        
        print("‚úÖ Lecture capteurs Community OK")
    
    def test_community_anomaly_detection_basic(self):
        """Test de d√©tection d'anomalies basique Community"""
        print("üß™ Test d√©tection d'anomalies Community...")
        
        # Lire les logs pendant 60 secondes pour d√©tecter des anomalies
        log_buffer = self.read_serial_until_pattern(r"Anomalie|seuils fixes", timeout=60)
        
        # V√©rifier la m√©thode Community (seuils fixes)
        if "seuils fixes" in log_buffer:
            self.assertIn("seuils fixes", log_buffer)
            print("‚úÖ D√©tection par seuils fixes Community confirm√©e")
        
        # Si anomalie d√©tect√©e, v√©rifier le traitement Community
        if "Anomalie d√©tect√©e" in log_buffer:
            self.assertIn("Anomalie d√©tect√©e", log_buffer)
            self.assertNotIn("ML", log_buffer)  # Pas de ML en Community
            self.assertNotIn("adaptatif", log_buffer)  # Pas d'adaptation en Community
            print("‚ö†Ô∏è Anomalie d√©tect√©e et trait√©e correctement (Community)")
        else:
            print("‚ÑπÔ∏è Aucune anomalie d√©tect√©e (fonctionnement normal)")
        
        print("‚úÖ D√©tection d'anomalies Community OK")
    
    def test_community_no_enterprise_features(self):
        """Test que les fonctionnalit√©s Enterprise ne sont pas pr√©sentes"""
        print("üß™ Test absence fonctionnalit√©s Enterprise...")
        
        # Lire les logs g√©n√©raux
        log_buffer = self.read_serial_until_pattern(r"Community Edition", timeout=30)
        
        # V√©rifier l'absence des fonctionnalit√©s Enterprise
        enterprise_features = [
            "temps r√©el",
            "Hardware Security Module",
            "TRNG",
            "attestation continue",
            "ML adaptatif",
            "eFuse",
            "Secure Boot v2",
            "Flash Encryption"
        ]
        
        for feature in enterprise_features:
            if feature in log_buffer:
                # V√©rifier que c'est mentionn√© comme non disponible
                self.assertTrue(
                    "non disponible" in log_buffer or 
                    "Enterprise" in log_buffer or
                    "pas de" in log_buffer.lower(),
                    f"Fonctionnalit√© Enterprise '{feature}' pr√©sente en Community"
                )
        
        print("‚úÖ Fonctionnalit√©s Enterprise correctement absentes")
    
    def test_community_educational_messages(self):
        """Test des messages √©ducatifs Community"""
        print("üß™ Test messages √©ducatifs Community...")
        
        boot_log = self.read_serial_until_pattern(r"Community Edition", timeout=20)
        
        # V√©rifier les messages √©ducatifs
        educational_messages = [
            "Community Edition",
            "√©ducative",
            "apprentissage",
            "Version √©ducative",
            "Id√©al pour",
            "üéì"
        ]
        
        found_messages = 0
        for message in educational_messages:
            if message in boot_log:
                found_messages += 1
        
        self.assertGreater(found_messages, 2, "Messages √©ducatifs insuffisants")
        print(f"‚úÖ {found_messages} messages √©ducatifs trouv√©s")
    
    def test_community_performance_basic(self):
        """Test des performances de base Community"""
        print("üß™ Test performances Community...")
        
        # Collecter les m√©triques pendant 30 secondes
        metrics_log = self.read_serial_until_pattern(r"ms|dur√©e", timeout=30)
        
        # Analyser les temps si disponibles
        timing_matches = re.findall(r"(\d+) ?ms", metrics_log)
        if timing_matches:
            timings = [int(t) for t in timing_matches]
            avg_timing = sum(timings) / len(timings)
            
            # Les performances Community sont plus lentes qu'Enterprise (acceptable)
            self.assertLess(avg_timing, 5000, "Temps de traitement Community < 5s")
            
            print(f"üìä Temps moyen Community: {avg_timing:.1f}ms")
        
        print("‚úÖ Performances Community acceptables")

def run_community_tests():
    """Ex√©cute tous les tests Community"""
    print("üöÄ D√©marrage des tests SecureIoT-VIF Community Edition")
    print("=" * 60)
    
    # Cr√©er la suite de tests
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecureIoTVIFCommunityTests)
    
    # Ex√©cuter les tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # R√©sum√©
    print("=" * 60)
    if result.wasSuccessful():
        print("‚úÖ Tous les tests Community sont pass√©s avec succ√®s!")
        print("üéì SecureIoT-VIF Community Edition op√©rationnelle")
    else:
        print(f"‚ùå {len(result.failures)} tests √©chou√©s, {len(result.errors)} erreurs")
        
        for test, error in result.failures + result.errors:
            print(f"‚ùå {test}: {error}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_community_tests()
    exit(0 if success else 1)